.IGNORE:
def: run_all

run_all: run_cpp_merged run_cpp run_ff run_seq run_java

def_run:  compile
	./run_bms.rb 'WordCount' 22

bms_preliminaires: compile
	./run_bms.rb 'WordCount' 1
	./run_bms.rb 'WordCount' 2
	./run_bms.rb 'WordCount' 3

TEST_FILE_78792="testdata/78792Words.txt"
ATTENDUS_78792="attendus-78792.txt"

TEST_FILE="testdata/10Words.txt"
ATTENDUS="attendus-10.txt"

#TEST_FILE="testdata/131Words.txt"
#ATTENDUS="attendus-131.txt"

TEST_FILE="testdata/78792Words.txt"
ATTENDUS="attendus-78792.txt"

#TEST_FILE="testdata/752856Words.txt"
#ATTENDUS="attendus-752856.txt"

#MAP_TYPE=-D__ORDERED_MAP__

########################################################

# Specify the final target name
EXE 		:= WordCount WordCount.class WordCountFastFlow WordCountFastFlowSansType WordCountSeq WordCountMerged

# Specify the tests path
ROOT_TESTS 	:= $(wildcard *.cpp)
# Specify the pipe path
#ROOT_PIPE      := $(HOME)/RepositoryFastFlow/PpFf_Catch/src/pp
#ROOT_PIPE 	:= $(HOME)/ProjectMemoir/Release2/PpFf/src
ROOT_PIPE 	:= $(HOME)/PpFf/src

# Get the corresponding object file list
OBJ 		:= $(ROOT_TESTS:.cpp=.o)
# From the object file list, get the dependency file list to handle automatic
DEP 		:= $(OBJ:.o=.d)

# Compiler
CXX		= g++ -std=c++17 $(MAP_TYPE)
# Specify preprocessor flags
CPPFLAGS 	:= -I./ -I $(ROOT_PIPE)
# Required flags to enable the automatic dependency generation by the compiler
CPPFLAGS 	+= -MMD -MP
# Warning flags
CXXFLAGS  	= -Wall
# Specify linker libraries
LDLIBS 		:= -lpthread

OPTFLAGS	=  -O3 -finline-functions -DNDEBUG

# Tell make that these target are not real files
.PHONY: all clean cleanall
.SUFFIXES: .cpp 

compile: $(EXE)

run: run_cpp run_java #run_seq

run_cpp: WordCount
	@echo "*** Execution C++ *** "
	@./WordCount 4 $(TEST_FILE) 1 | sort > obtenus-cpp.txt
	diff obtenus-cpp.txt $(ATTENDUS)
	@./WordCount 4 $(TEST_FILE) 0

run_cpp_merged: WordCountMerged
	@echo "*** Execution C++ Merged *** "
	@./WordCountMerged 4 $(TEST_FILE) 1 | sort > obtenus-cpp.txt
	diff obtenus-cpp.txt $(ATTENDUS)
	@./WordCountMerged 4 $(TEST_FILE) 0

run_ff: WordCountFastFlow
	@echo "*** Execution FastFlow *** "
	@./WordCountFastFlow 4 $(TEST_FILE) 1 | sort > obtenus-ff.txt
	diff obtenus-ff.txt $(ATTENDUS)
	@./WordCountFastFlow 4 $(TEST_FILE) 0

run_seq: WordCountSeq
	@echo "*** Execution seq. *** "
	@./WordCountSeq $(TEST_FILE) 1 | sort > obtenus-seq.txt
	diff obtenus-seq.txt $(ATTENDUS)

run_java: WordCount.class
	@echo "*** Execution Java ***"
	java -cp . WordCount 0 $(TEST_FILE) 1 | sort > obtenus-java.txt
	diff obtenus-java.txt $(ATTENDUS)

run_java_warmup: WordCount.class
	@echo "*** Execution Java avec Warmup ***"
	java -cp . WordCount 1 $(TEST_FILE) 1 | sort > obtenus-java-warmup.txt
	diff obtenus-java-warmup.txt $(ATTENDUS)

WordCount: WordCount.o
		  $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OPTFLAGS) WordCount.o $(LDLIBS) -o WordCount

WordCountMerged: WordCountMerged.o
		  $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OPTFLAGS) WordCountMerged.o $(LDLIBS) -o WordCountMerged

WordCountSeq: WordCountSeq.o
		  $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OPTFLAGS) WordCountSeq.o $(LDLIBS) -o WordCountSeq

WordCount.class: WordCount.java
	javac WordCount.java

WordCountFastFlow: $(OBJ)
		  $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OPTFLAGS) WordCountFastFlow.o $(LDLIBS) -o WordCountFastFlow

WordCountFastFlowSansType: $(OBJ)
		  $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OPTFLAGS) WordCountFastFlowSansType.o $(LDLIBS) -o WordCountFastFlowSansType

clean: 
	\rm -f $(EXE) $(OBJ) $(DEP)
	\rm -f *.class
	\rm -f *.o *~
	\rm -f obtenus*txt temps-sh.txt res.txt

cleanx cleanall cleanxtra: clean

# Include the dependency
-include $(DEP)

