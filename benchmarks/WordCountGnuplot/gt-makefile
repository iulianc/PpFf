.IGNORE:
def: test_warmup

def_run:  compile
	make -f gt-makefile run_bms

def_plot:
	./gnuplot-debit.sh

# 
# NOTE: Les differentes tailles des fichiers de donnes sont les suivantes:
#
# 10
# 131
# 377
# 3805
# 7610
# 78792
# 167941
# 281307
# 482636
# 752856
# 1639684
# 2137758
# 2614743
#

NB_FOIS=30
TEST_FILE="testdata/78792Words.txt"
TEST_FILE="testdata/281307Words.txt"
#TEST_FILE="testdata/2137758Words.txt"
ATTENDUS="attendus-78792.txt"

#MAP_TYPE=-D__ORDERED_MAP__
NB_TIMES=5

########################################################

# Specify the final target name
EXE 		:= WordCount WordCount.class WordCountWarmup.class WordCountFastFlow # WordCountSeq 

# Specify the tests path
ROOT_TESTS 	:= $(wildcard *.cpp)
# Specify the pipe path
#ROOT_PIPE      := $(HOME)/RepositoryFastFlow/PpFf_Catch/src/pp
#ROOT_PIPE 	:= $(HOME)/ProjectMemoir/Release2/PpFf/src
ROOT_PIPE 	:= $(HOME)/PpFf/src

# Get the corresponding object file list
OBJ 		:= $(ROOT_TESTS:.cpp=.o)
# From the object file list, get the dependency file list to handle automatic
DEP 		:= $(OBJ:.o=.d)

# Compiler
CXX		= g++ -std=c++17 $(MAP_TYPE)
# Specify preprocessor flags
CPPFLAGS 	:= -I./ -I $(ROOT_PIPE)
# Required flags to enable the automatic dependency generation by the compiler
CPPFLAGS 	+= -MMD -MP
# Warning flags
CXXFLAGS  	= -Wall
# Specify linker libraries
LDLIBS 		:= -lpthread

OPTFLAGS	=  -O3 -finline-functions -DNDEBUG

# Tell make that these target are not real files
.PHONY: all clean cleanall
.SUFFIXES: .cpp 

compile: $(EXE)

run: run_cpp run_java #run_seq

run_sh:
	@echo "*** Execution wc.sh"
	@time (cat $(TEST_FILE) | ./wc.sh | sort > obtenus-sh.txt) 2> temps-sh.txt
	@diff obtenus-sh.txt $(ATTENDUS)
	@./real-to-ms.rb `cat temps-sh.txt | grep real | sed s/real//`

run_cpp: compile
	@echo "*** Execution C++ *** "
	@./WordCount 4 $(TEST_FILE) 1 | sort > obtenus-cpp.txt
	diff obtenus-cpp.txt $(ATTENDUS)

run_ff: compile
	@echo "*** Execution FastFlow *** "
	@./WordCountFastFlow $(TEST_FILE) 1 | sort > obtenus-ff.txt
	diff obtenus-ff.txt $(ATTENDUS)

run_seq: compile
	@echo "*** Execution seq. *** "
	@@./WordCountSeq $(TEST_FILE) $(NB_TIMES) | sort > obtenus-seq.txt
	@@diff obtenus-seq.txt $(ATTENDUS)

run_java: compile
	@echo "*** Execution Java ***"
	@java -cp . WordCount $(TEST_FILE) 1 | sort > obtenus-java.txt
	diff obtenus-java.txt $(ATTENDUS)

run_java_warmup: compile
	@echo "*** Execution Java avec Warmup ***"
	@java -cp . WordCountWarmup $(TEST_FILE) 1 | sort > obtenus-java-warmup.txt
	diff obtenus-java-warmup.txt $(ATTENDUS)

test_warmup: compile
	@echo "*** Execution Java sans Warmup ***"
	@./testerWarmup.sh $(TEST_FILE) 0 $(NB_FOIS)
	@echo "*** Execution Java avec Warmup ***"
	@./testerWarmup.sh $(TEST_FILE) 2 $(NB_FOIS) 2> /dev/null

WordCount: $(OBJ)
		  $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OPTFLAGS) WordCount.o $(LDLIBS) -o WordCount

WordCountSeq: $(OBJ)
		  $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OPTFLAGS) WordCountSeq.o $(LDLIBS) -o WordCountSeq

WordCount.class: WordCount.java
	javac WordCount.java

WordCountFastFlow: $(OBJ)
		  $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OPTFLAGS) WordCountFastFlow.o $(LDLIBS) -o WordCountFastFlow

WordCountWarmup.class: WordCountWarmup.java
	javac WordCountWarmup.java

clean: 
	\rm -f $(EXE) $(OBJ) $(DEP)
	\rm -f *.class

cleanx cleanall cleanxtra: clean
	\rm -f *.o *~
	\rm -f obtenus*txt temps-sh.txt res.txt

# Include the dependency
-include $(DEP)

run_bms: compile
	./run_bms.rb 'WordCount' | tee temps-wc.txt

