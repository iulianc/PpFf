@startuml all_new-version

'skinparam style strictuml
'skinparam groupInheritance 3

hide empty members

'skinparam linetype ortho
'skinparam groupInheritance 2

' Diagramme contenant l'ensemble de toutes les classes, pour avoir une
' vue detaillee

skinparam classAttributeIconSize 0

'Version avec details
'!include flow.txt!0

'Version avec juste nom de la classe
!include flow.txt!1


/' Inclure l'un ou l'autre pour simplifier le diagramme...'/

'!include operators.txt

!include operatorsBase.txt


package Pipeline {

  class Pipeline {
    nbWorkers(): int
    isParallel(): bool
    ..
    run(): void
  }

  together {
    class Farm {
      nbWorkers(): int
    }

    class Worker {
    }

    class Node {
      build_ff_node(): ff_node
    }
  }


}  

  package FastFlow {

    class ff_farm {
    }

    class ff_pipeline {
      run(): void
    }

    class ff_node {
      svc(): void*
    }

    ff_farm --|> ff_node
    ff_farm --> "1..*\n{ordered}" ff_node

    ff_pipeline --|> ff_node
    ff_pipeline --> "1..*\n{ordered}" ff_node
  }

Farm --|> Node
Worker --|> Node
Worker *--> "nodes\n1..*\n{ordered}" Node

Farm *-> "workers\n1..*\n{ordered}" Worker

Node --> ff_node
BaseOperator --|> ff_node

package Stages {

  interface Stage {
  }

  enum StageType {
    SOURCE_STAGE
    INTERMEDIATE_STAGE
    COLLECTOR_STAGE
  }

 class BaseStage<TOperator, StageType> {
   isSource(): bool
   isCollector(): bool
 }

  class CollectorStage<TOperator> {
    value(): TOperator::Value
  }

  StageType .. BaseStage
}

BaseStage .|> Stage

BaseStage --> "\noperators\n1..* {ordered}" BaseOperator 

CollectorStage --|> BaseStage

'Pipeline *--> "source" Node
'note on link : source &#8712; stages 

Pipeline *--> "nodes\n1..*\n{ordered}" Node

Pipeline *--> "stages\n1..*\n{ordered}" Stage



Flow --> "pipe" Pipeline : implemented by > 

@enduml
