@startuml objets3

skinparam titleBorderRoundCorner 14
skinparam titleBorderThinckness 2
skinparam titleBorderColor black
hide empty members
'skinparam linetype ortho
skinparam classAttributeIconSize 0

!$avecFastFlow = %intval(%getenv("AVEC_FF"))

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'title currentResult =\l\tFlow::source<int>(elems.begin(), elems.end())\l\t.parallel(2)\l\t.map<int, int>(([](int *in){ *in *= 3; return in; }))\l\t.parallel(4)\l\t.max<int>();
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

object currentResult {
  class = Flow
}

object source {
 class = Node
 ......
 operatorType = SOURCE_OP
}

object sourceOp #Wheat {
  class = SourceOperator<T, Iterator>
  superclass = Operator < ff_node
  ......
  begin = ...
  end = ...
}

object maxOp0 #Wheat {
  class = MaxOperator<int>
  superclass = Operator < ff_node
}

object maxOp1 #Wheat {
  class = MaxOperator<int>
  superclass = Operator < ff_node
}

object maxOp2 #Wheat {
  class = MaxOperator<int>
  superclass = Operator < ff_node
}

object maxOp3 #Wheat {
  class = MaxOperator<int>
  superclass = Operator < ff_node
}

object mapOp0 #Wheat {
  class = MapOperator<int>
  superclass = Operator < ff_node
}

object mapOp1 #Wheat {
  class = MapOperator<int>
  superclass = Operator < ff_node
}

source --> sourceOp

object collector {
  class = Collector<MaxOperator>
}

collector -[hidden] farm1_worker0

farm0 -[hidden] collector

farm1_worker0 --> "[0]" maxOp0
farm1_worker1 --> "[1]" maxOp1
farm1_worker2 --> "[2]" maxOp2
farm1_worker3 --> "[3]" maxOp3

farm0_worker0 --> "[0]" mapOp0
farm0_worker1 --> "[1]" mapOp1

farm0_worker0 -[hidden] farm0_worker1

object pipe {
  class = Pipeline
  ..
  no_workers = 2
  sourceExists = true
}

currentResult --> pipe : implemented by >

pipe --> "[0]" source
pipe --> "[1]" farm0
pipe --> "[2]" farm1
pipe --> collector

together {
object farm0_worker0 {
  class = Worker
  superclass = Node
}

object farm0_worker1 {
  class = Worker
  superclass = Node
}
}

source -[hidden] farm0
farm0 -[hidden] farm1

sourceOp -[hidden] farm0_worker0


together {
object farm1_worker0 {
  class = Worker
  superclass = Node
}

object farm1_worker1 {
  class = Worker
  superclass = Node
}

object farm1_worker2 {
  class = Worker
  superclass = Node
}

object farm1_worker3 {
  class = Worker
  superclass = Node
}
}

farm1_worker0 -[hidden] farm1_worker1
farm1_worker1 -[hidden] farm1_worker2
farm1_worker2 -[hidden] farm1_worker3

farm0 --> "[0]" farm0_worker0
farm0 --> "[1]" farm0_worker1

farm1 --> "[0]" farm1_worker0
farm1 --> "[1]" farm1_worker1
farm1 --> "[2]" farm1_worker2
farm1 --> "[3]" farm1_worker3


object farm1 {
  class = Farm
  superclass = Node
  ......
  operatorType = COLLECTOR_OP
  no_workers = 4
}

object farm0 {
  class = Farm
  superclass = Node
  ......
  operatorType = INTERMEDIATE_OP
  no_workers = 2
}


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Les objets FastFlow associes
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

object ff_pipeline0 #Wheat {
  class = ff_pipeline
}
pipe ..> ff_pipeline0
note on link #Tan: "pipe.build_ff_node()"

object ff_farm1 #Wheat {
  class = ff_farm
}

object ff_farm0 #Wheat {
  class = ff_farm
}

ff_pipeline0 --> "[0]" sourceOp
ff_pipeline0 --> "[1]" ff_farm0
ff_pipeline0 --> "[2]" ff_farm1

ff_farm0 --> "[0]" mapOp0
ff_farm0 --> "[1]" mapOp1

ff_farm1 --> "[0]" maxOp0
ff_farm1 --> "[1]" maxOp1
ff_farm1 --> "[2]" maxOp2
ff_farm1 --> "[3]" maxOp3
ff_farm1 -[hidden] farm1_worker0

collector --> maxOp1
collector --> maxOp0
collector --> maxOp2
collector --> maxOp3

!if ($avecFastFlow == 0)
hide ff_pipeline0
hide ff_farm0
hide ff_farm1
!endif

@enduml
