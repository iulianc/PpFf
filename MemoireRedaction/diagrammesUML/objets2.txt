@startuml objets2

skinparam titleBorderRoundCorner 14
skinparam titleBorderThinckness 2
skinparam titleBorderColor black

title Les objets associés à la représentation du Flow suivant:\lcurrentResult =\l\tFlow::source<int>(elems.begin(), elems.end())\l\t.parallel(2)\l\t.max<int>();


hide empty members

'skinparam linetype ortho

skinparam classAttributeIconSize 0


object currentResult {
  class = Flow
}

object sourceStage {
 class = BaseStage<SourceOp>
 ......
 stageType = SOURCE_STAGE
}

object maxStage {
  class = CollectorStage<MaxOperator<int>>
  ......
  stageType = COLLECTOR_STAGE
}

object sourceOp {
  class = SourceOperator<T, Iterator>
  superclass = BaseOperator < Node < ff_node
  ......
  begin = ...
  end = ...
  nodeType = BASIC_NODE
}

object maxOp0 {
  class = MaxOperator<int>
  superclass = BaseOperator < Node < ff_node
  ......
  nodeType = BASIC_NODE
}

object maxOp1 {
  class = MaxOperator<int>
  superclass = BaseOperator < Node < ff_node
  ......
  nodeType = BASIC_NODE
}

sourceStage --> "operators[0]" sourceOp

maxStage --> "operators[0]" maxOp0
maxStage --> "operators[1]" maxOp1


worker0 --> "nodes[0]" maxOp0
worker1 --> "nodes[0]" maxOp1


object pipe {
  class = Pipeline
  ..
  no_workers = 2
  sourceExists = true
}

currentResult --> pipe : implemented by >

pipe --> "stages[0]" sourceStage
pipe --> "nodes[0]" sourceStage

pipe --> "stages[1]" maxStage
pipe --> "nodes[1]" farm

'farm -- maxStage

together {
object worker0 {
  class = Worker
  superclass = Node < ff_node
  .....
  nodeType = WORKER_NODE
}

object worker1 {
  class = Worker
  superclass = Node < ff_node
  .....
  nodeType = WORKER_NODE
}
}

farm --> "workers[0]" worker0


farm --> "workers[1]" worker1


object farm {
  class = Farm
  superclass = Node < ff_node
  ......
  no_workers = 2
  nodeType = FARM_NODE
}

object ff_pipeline_ <<ff_node_()>> {
  class = ff_pipeline
}
pipe ..> ff_pipeline_
note on link: "pipe.ff_node_()"

object ff_farm_ <<ff_node_()>> {
  class = ff_farm
}

ff_pipeline_ --> "nodes_list[0]" sourceOp
ff_pipeline_ --> "nodes_list[1]" ff_farm_

farm ..> ff_farm_
note on link: "pp.ff_node_()"


ff_farm_ --> maxOp0
ff_farm_ --> maxOp1

@enduml
