@startuml all

'skinparam style strictuml
'skinparam groupInheritance 3

hide empty members

skinparam linetype ortho
'skinparam groupInheritance 2

' Diagramme contenant l'ensemble de toutes les classes, pour avoir une
' vue detaillee

skinparam classAttributeIconSize 0

'Version avec details
'!include flow.txt!0

'Version avec juste nom de la classe
!include flow.txt!1


package Pipeline {

    class Pipeline {
        addNodes<TOperator, TParam1>(): void
        addNodes<TOperator, TParam1, TParam2>(): void
        addNodes<TOperator, TParam1, TParam2, TParam3>(): void
        ..
        nbWorkers(): int
        isParallel(): bool
        ..
        run(): void
        value(): TOperator::value
    }

    together {
        class Farm {
            nbWorkers(): int
        }

        class Worker {
        }

        class Node {
            build_ff_node(): Operator
        }
    }

    class Collector<TOperator> {
        value(): TOperator::Value
    }
}  

  package FastFlow {

    class ff_farm {
    }

    class ff_pipeline {
      run(): void
    }

    abstract class ff_node {
      svc(): void*
    }

    ff_farm --|> ff_node
    ff_farm --> "1..*\n{ordered}" ff_node

    ff_pipeline --|> ff_node
    ff_pipeline --> "1..*\n{ordered}" ff_node
  }

    Farm --|> Node
    Worker --|> Node
    Worker *--> "nodes\n1..*\n{ordered}" Node

    Farm *-> "workers\n1..*\n{ordered}" Worker




    Pipeline --> "collector\n1" Collector

    Pipeline *--> "nodes\n1..*\n{ordered}" Node


    Flow --> "pipe" Pipeline : implemented by > 

    !include operators.txt

@enduml
